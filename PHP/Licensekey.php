<?php

namespace LSV;
class Licensekey
{
    private $library = [
        "alphabet" => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",],
        "numeric" => ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9",],
        "alphanum" => [
            "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
            "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
        ]
    ];

    public $defaultFormat = "%%%%%-%%%%%-%%%%%-%%%%%";
    public $defaultCapital = true;
    public $defaultHowManyForBulk = 10;

    /**
     * Licensekey constructor.
     * The args passed will set the default details for each generation function.
     * @param string $defaultFormat
     * @param bool $defaultCapital
     * @param int $defaultHowManyForBulk
     */
    public function __construct($defaultFormat = "%%%%%-%%%%%-%%%%%-%%%%%", $defaultCapital = true, $defaultHowManyForBulk = 10)
    {
        $this->defaultFormat = $defaultFormat;
        $this->defaultCapital = $defaultCapital;
        $this->defaultHowManyForBulk = $defaultHowManyForBulk;
    }

    /**
     * % or * = Alphanumeric
     * ? = Alphabet
     * # = Numeric
     *
     * If it returns anything except a regular string, I may of done a mess up, make an issue!
     *
     * @param string $format
     * @param bool $capital
     * @return string
     */
    public function generate($format = null, $capital = null)
    {
        if (empty($format)) $format = $this->defaultFormat;
        if (empty($capital)) $capital = $this->defaultCapital;
        $format = $this->defaultFormat;
        $format = preg_replace_callback('|[*%]|', function ($matches) {
            return $this->library["alphanum"][array_rand($this->library["alphanum"])];
        }, $format);
        $format = preg_replace_callback('|\?|', function ($matches) {
            return $this->library["alphabet"][array_rand($this->library["alphabet"])];
        }, $format);
        $format = preg_replace_callback('|#|', function ($matches) {
            return $this->library["numeric"][array_rand($this->library["numeric"])];
        }, $format);
        if ($capital === true) $format = strtoupper($format);
        return $format;
    }

    /**
     * Returns an array of keys generated by the generate function
     *
     * @param string $format
     * @param bool $capital
     * @param int $howMany
     * @return string[]
     */
    public function bulkGenerate($format = null, $capital = null, $howMany = 10)
    {
        if (empty($format)) $format = $this->defaultFormat;
        if (empty($capital)) $capital = $this->defaultCapital;
        if (empty($howMany)) $capital = $this->defaultHowManyForBulk;
        $o = [];
        for ($i = 0; $i < $howMany; $i++) {
            array_push($o, $this->generate($format, $capital));
        }
        return $o;
    }
}